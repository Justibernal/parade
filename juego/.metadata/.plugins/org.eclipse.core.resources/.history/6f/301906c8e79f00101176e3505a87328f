package vista.gui;

import javax.swing.KeyStroke;
import javax.swing.*;
import javax.swing.border.TitledBorder;

import modelo.core.*;
import controlador.JuegoController;
import controlador.Controladores;
//renovado
import java.awt.*;
import java.awt.event.*;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Font;
import java.awt.FontMetrics;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import java.awt.event.KeyEvent;
import java.awt.Toolkit;

/** GUI para Parade – Swing + RMI. */
public class ClienteSwingMain extends JFrame {

  private static final long serialVersionUID = 1L;

  // --- estado de UI ---
  private boolean myTurn = false;

  // --- fin de partida (popup) ---
  private String  lastResumen = null;
  private boolean finMostrado = false;

  // --- Controller (RMI) ---
  private JuegoController ctrl;
  private String myId, myName;

  // --- UI models ---
  private final DefaultListModel<Carta>     desfileModel = new DefaultListModel<>();
  private final DefaultListModel<Carta>     manoModel    = new DefaultListModel<>();
  private final DefaultListModel<PilaItem>  pilasModel   = new DefaultListModel<>();

  // --- UI widgets ---
  private final JList<Carta>      desfileList = new JList<>(desfileModel);
  private final JList<Carta>      manoList    = new JList<>(manoModel);
  private final JList<PilaItem>   pilasList   = new JList<>(pilasModel);
  private final JLabel            turnoLbl    = new JLabel("Turno: ?");
  private final JLabel            mazoLbl     = new JLabel("Mazo: ?");
  private final JLabel            jugadoresLbl= new JLabel("Jugadores: –");
  private final JLabel            totalParcialLbl = new JLabel("Total parcial: 0 puntos"); // NUEVO: total parcial
  private final JButton           startBtn    = new JButton("Start");
  private final JButton           playBtn     = new JButton("Jugar (índice seleccionado)");
  private final JButton           finalPickBtn= new JButton("Elegir 2 cartas finales");

  // --- Chat ---
  private final JTextArea  chatArea  = new JTextArea();
  private final JTextField chatInput = new JTextField();
  private final JButton    chatSend  = new JButton("Enviar");

  // --- Panel de rivales ---
  private final JTextArea rivalesArea = new JTextArea(); // NUEVO: para mostrar cartas de rivales

  // Menú: campos para habilitar/deshabilitar
  private JMenuItem miStart, miJugar, miTop; // ELIMINADOS: miGuardar, miCargar

  // renderer compartido con escala para cartas
  private final CardCellRenderer cardRenderer = new CardCellRenderer();

  public ClienteSwingMain() {
    super("Parade - Cliente GUI");
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    setPreferredSize(new Dimension(840, 680)); // Aumentado para nuevo panel

    // ====== ROOT ======
    var root = new JPanel(new BorderLayout(8, 8));
    setContentPane(root);

    // Top info
    var top = new JPanel(new FlowLayout(FlowLayout.LEFT));
    top.add(turnoLbl);
    top.add(Box.createHorizontalStrut(16));
    top.add(mazoLbl);
    top.add(Box.createHorizontalStrut(16));
    top.add(jugadoresLbl);
    root.add(top, BorderLayout.NORTH);

    // ---------- Panel central (4 filas verticales) ----------
    var stack = new JPanel();
    stack.setLayout(new BoxLayout(stack, BoxLayout.Y_AXIS));

    // 1) Parade (encabezado con flechas)
    var pDesfile = new JPanel(new BorderLayout());
    pDesfile.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createLineBorder(new java.awt.Color(0xDDDDDD)),
        BorderFactory.createEmptyBorder(4, 4, 4, 4)
    ));
    var paradeHeader = new JPanel(new BorderLayout());
    var lblParade = new JLabel("Parade");
    lblParade.setFont(lblParade.getFont().deriveFont(Font.BOLD));
    var lblHint = new JLabel("jugás a la derecha \u2192   ·   evalúa hacia \u2190");
    lblHint.setForeground(new java.awt.Color(0x616161));
    lblHint.setHorizontalAlignment(SwingConstants.RIGHT);
    lblHint.setFont(lblHint.getFont().deriveFont(11f));
    paradeHeader.add(lblParade, BorderLayout.WEST);
    paradeHeader.add(lblHint,   BorderLayout.EAST);
    paradeHeader.setBorder(BorderFactory.createEmptyBorder(0, 2, 4, 2));
    pDesfile.add(paradeHeader, BorderLayout.NORTH);

    desfileList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
    desfileList.setVisibleRowCount(1);
    desfileList.setCellRenderer(cardRenderer);
    var spDesfile = new JScrollPane(
        desfileList,
        ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER,
        ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    pDesfile.add(spDesfile, BorderLayout.CENTER);
    stack.add(pDesfile);

    // 2) Mano
    stack.add(Box.createVerticalStrut(6));
    var pMano = new JPanel(new BorderLayout());
    pMano.setBorder(new TitledBorder("Tu mano (doble-click o botón Jugar)"));
    manoList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
    manoList.setVisibleRowCount(1);
    manoList.setCellRenderer(cardRenderer);
    // <<<<<< Selección múltiple para la fase final >>>>>>
    manoList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    var spMano = new JScrollPane(
        manoList,
        ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER,
        ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    pMano.add(spMano, BorderLayout.CENTER);
    stack.add(pMano);

    // 3) Pilas capturadas
    stack.add(Box.createVerticalStrut(6));
    var pPilas = new JPanel(new BorderLayout());
    pPilas.setBorder(new TitledBorder("Cartas Capturadas (cantidad y puntos por color)")); // MODIFICADO
    pilasList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
    pilasList.setVisibleRowCount(1);
    pilasList.setFixedCellHeight(40);
    pilasList.setFont(new Font("SansSerif", Font.PLAIN, 13));
    pilasList.setPrototypeCellValue(new PilaItem(modelo.core.Color.AMARILLO, 99, 99)); // MODIFICADO
    pilasList.setCellRenderer(new PilaRenderer());
    var spPilas = new JScrollPane(
        pilasList,
        ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER,
        ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    spPilas.setPreferredSize(new Dimension(10, 46));
    pPilas.add(spPilas, BorderLayout.CENTER);
    
    // Agregar label de total parcial debajo de las pilas
    totalParcialLbl.setFont(new Font("SansSerif", Font.BOLD, 12));
    totalParcialLbl.setForeground(new java.awt.Color(0x2E7D32));
    totalParcialLbl.setBorder(BorderFactory.createEmptyBorder(4, 8, 4, 8));
    pPilas.add(totalParcialLbl, BorderLayout.SOUTH);
    
    stack.add(pPilas);

    // 4) NUEVO: Panel de cartas de rivales
    stack.add(Box.createVerticalStrut(6));
    var pRivales = new JPanel(new BorderLayout());
    pRivales.setBorder(new TitledBorder("Cartas de Rivales (resumen)"));
    rivalesArea.setEditable(false);
    rivalesArea.setFont(new Font("Monospaced", Font.PLAIN, 11));
    rivalesArea.setBackground(new java.awt.Color(0xF8F8F8));
    var spRivales = new JScrollPane(rivalesArea);
    spRivales.setPreferredSize(new Dimension(10, 80));
    pRivales.add(spRivales, BorderLayout.CENTER);
    stack.add(pRivales);

    // Controles
    stack.add(Box.createVerticalStrut(6));
    var bottom = new JPanel(new FlowLayout(FlowLayout.LEFT));
    bottom.add(startBtn);
    bottom.add(playBtn);
    finalPickBtn.setVisible(false); // aparece recién en la fase final
    bottom.add(finalPickBtn);
    stack.add(bottom);

    // Centro → SOLO stack (sin panel de log)
    root.add(stack, BorderLayout.CENTER);

    // ====== Chat (derecha, de arriba a abajo) ======
    var chatPanel = new JPanel(new BorderLayout(6, 6));
    chatPanel.setBorder(new TitledBorder("Chat"));
    chatArea.setEditable(false);
    chatArea.setLineWrap(true);
    chatArea.setWrapStyleWord(true);
    var spChat = new JScrollPane(chatArea);
    chatPanel.add(spChat, BorderLayout.CENTER);

    var chatBottom = new JPanel(new BorderLayout(6, 6));
    chatBottom.add(chatInput, BorderLayout.CENTER);
    chatBottom.add(chatSend, BorderLayout.EAST);
    chatPanel.add(chatBottom, BorderLayout.SOUTH);

    // más angosto (aprox. mitad)
    chatPanel.setPreferredSize(new Dimension(140, 10));
    root.add(chatPanel, BorderLayout.EAST);

    // Enviar con botón o Enter
    Runnable doSend = () -> {
      String txt = chatInput.getText().trim();
      if (txt.isEmpty()) return;
      if (ctrl == null || myId == null) {
        JOptionPane.showMessageDialog(ClienteSwingMain.this,
            "Esperá a unirte antes de chatear.", "Chat",
            JOptionPane.INFORMATION_MESSAGE);
        return;
      }
      chatInput.setText("");
      invokeRemote(() -> ctrl.sendChat(myId, txt));
    };
    chatSend.addActionListener(e -> doSend.run());
    chatInput.addActionListener(e -> doSend.run());

    // ====== Menú ======
    setJMenuBar(createMenuBar());

    // ====== Eventos ======
    startBtn.addActionListener(e -> {
      int ok = JOptionPane.showConfirmDialog(
          ClienteSwingMain.this, "¿Iniciar partida?", "Start", JOptionPane.OK_CANCEL_OPTION);
      if (ok == JOptionPane.OK_OPTION) invokeRemote(() -> ctrl.iniciarJuego());
    });
    playBtn.addActionListener(e -> playSelected());

    // final: manda 2 índices seleccionados en la mano
    finalPickBtn.addActionListener(e -> {
      int[] sel = manoList.getSelectedIndices();
      if (sel.length != 2) {
        JOptionPane.showMessageDialog(this,
            "Seleccioná exactamente 2 cartas de tu mano.", "Elección final",
            JOptionPane.INFORMATION_MESSAGE);
        return;
      }
      invokeRemote(() -> ctrl.elegirCartasFinales(myId, sel));
    });

    // doble-click en la mano para jugar
    manoList.addMouseListener(new MouseAdapter() {
      @Override public void mouseClicked(MouseEvent e) {
        if (e.getClickCount() == 2 && myTurn) playSelected();
      }
    });

    // atajos: Enter = jugar, Ctrl/Cmd+S = Start
    playBtn.registerKeyboardAction(ev -> playBtn.doClick(),
        KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),
        JComponent.WHEN_IN_FOCUSED_WINDOW);
    startBtn.registerKeyboardAction(ev -> startBtn.doClick(),
        KeyStroke.getKeyStroke(KeyEvent.VK_S,
            Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx()),
        JComponent.WHEN_IN_FOCUSED_WINDOW);

    // Escala de cartas según ancho de ventana
    getRootPane().addComponentListener(new ComponentAdapter() {
      @Override public void componentResized(ComponentEvent e) {
        int w = getRootPane().getWidth();
        double r = w / 900.0;
        double s = 1.0 + 0.20 * (Math.min(1.20, Math.max(0.85, r)) - 1.0);
        s = Math.max(0.95, Math.min(1.12, s));
        cardRenderer.setScale(s);

        int cw = cardRenderer.getCardWidth() + 8;
        int ch = cardRenderer.getCardHeight() + 8;
        desfileList.setFixedCellHeight(ch);
        manoList.setFixedCellHeight(ch);
        manoList.setFixedCellWidth(cw);
        desfileList.revalidate(); desfileList.repaint();
        manoList.revalidate();   manoList.repaint();
      }
    });

    // inicial
    getRootPane().dispatchEvent(
        new ComponentEvent(getRootPane(), ComponentEvent.COMPONENT_RESIZED));

    // Conexión RMI al abrir (factory + join)
    addWindowListener(new WindowAdapter() {
      @Override public void windowOpened(WindowEvent e) {
        try {
          ctrl = Controladores.defaultRmi();
          conectarYUnirse();
        } catch (RuntimeException ex) {
          JOptionPane.showMessageDialog(ClienteSwingMain.this,
              "No pude iniciar el controlador:\n" +
                  (ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage()),
              "Error", JOptionPane.ERROR_MESSAGE);
        }
      }
    });

    pack();
    setLocationRelativeTo(null);
  }

  // --- Ranking histórico Top N ---
  private void showRanking() {
    invokeRemote(() -> {
      var top = ctrl.getTopRanking(10);
      var sb  = new StringBuilder("TOP 10 – Clasificación histórica\n\n");
      var fmt = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm");
      int i = 1;
      for (var e : top) {
        sb.append(i++).append(". ").append(e.getNombre())
          .append(" — ").append(e.getPuntos()).append(" pts")
          .append(" (").append(e.getCartas()).append(" cartas)")
          .append(" [").append(e.getEpochMillis() > 0 ?
                fmt.format(new java.util.Date(e.getEpochMillis())) : "–")
          .append("]\n");
      }
      if (top.isEmpty()) sb.append("Sin partidas aún.");
      JOptionPane.showMessageDialog(this, sb.toString(),
          "Ranking (Top 10)", JOptionPane.INFORMATION_MESSAGE);
    });
  }

  // --- Menú  ---
  private JMenuBar createMenuBar() {
    JMenuBar mb = new JMenuBar();

    JMenu juego = new JMenu("Juego");
    miStart   = new JMenuItem("Start");
    miJugar   = new JMenuItem("Jugar…");

    JMenuItem miSalir = new JMenuItem("Salir");

    miStart.setEnabled(false);
    miJugar.setEnabled(false);
   

    miStart.addActionListener(e -> startBtn.doClick());
    miJugar.addActionListener(e -> playBtn.doClick());



    miSalir.addActionListener(e -> {
      int ok = JOptionPane.showConfirmDialog(this, "¿Salir?", "Confirmar",
          JOptionPane.OK_CANCEL_OPTION);
      if (ok == JOptionPane.OK_OPTION) dispose();
    });

    juego.add(miStart);
    juego.add(miJugar);
    juego.addSeparator();
   
    juego.add(miSalir);
    mb.add(juego);

    JMenu ver = new JMenu("Ver");
    miTop = new JMenuItem("Ranking (Top 10)");
    miTop.setEnabled(false);
    miTop.setAccelerator(KeyStroke.getKeyStroke(
        KeyEvent.VK_R, Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx()));
    miTop.addActionListener(e -> showRanking());
    ver.add(miTop);
    mb.add(ver);

    JMenu ayuda = new JMenu("Ayuda");
    JMenuItem miReglas = new JMenuItem("Reglas rápidas");
    miReglas.addActionListener(e -> showReglasRapidas());
    ayuda.add(miReglas);

    JMenuItem miAcerca = new JMenuItem("Acerca de…");
    miAcerca.addActionListener(e ->
        JOptionPane.showMessageDialog(this,
            "Parade – Cliente Swing\nCátedra: POO / GUI + RMI\nAutor: " +
                (myName == null ? "?" : myName),
            "Acerca de", JOptionPane.INFORMATION_MESSAGE));
    ayuda.add(miAcerca);

    mb.add(ayuda);
    return mb;
  }

  private void playSelected() {
    int ix = manoList.getSelectedIndex();
    if (ix < 0) {
      JOptionPane.showMessageDialog(this,
          "Seleccioná una carta de tu mano.", "Jugar",
          JOptionPane.INFORMATION_MESSAGE);
      return;
    }
    invokeRemote(() -> ctrl.jugarCarta(myId, ix));
  }

  // --- Conexión + join ---
  private void conectarYUnirse() {
    try {
      myName = JOptionPane.showInputDialog(this, "Tu nombre:", "Unirse a Parade",
          JOptionPane.QUESTION_MESSAGE);
      if (myName == null || myName.trim().isEmpty()) myName = "Jugador";

      myId = ctrl.unirseJuego(myName, new JuegoController.Listener() {
        @Override public void onStateUpdate(EstadoJuego s) {
          SwingUtilities.invokeLater(() -> updateState(s));
        }
        @Override public void onEvent(String m) {
          SwingUtilities.invokeLater(() -> {
            if (m.startsWith("[CHAT]")) {
              String body = m.substring(6).trim();
              chatArea.append(body + "\n");
              chatArea.setCaretPosition(chatArea.getDocument().getLength());
              return;
            }
            log(m); // “log” como info al chat
            String lower = m.toLowerCase();
            if (lower.contains("no es tu turno")
                || lower.startsWith("índice inválido")
                || lower.contains("ya finalizó")
                || lower.contains("al menos 2 jugadores")) {
              JOptionPane.showMessageDialog(ClienteSwingMain.this, m, "Atención",
                  JOptionPane.WARNING_MESSAGE);
            }
            if (lower.contains("partida iniciada")) { lastResumen = null; finMostrado = false; }
            if (m.startsWith("PUNTAJES FINALES"))   { lastResumen = m; }
          });
        }
      });

      log("Conectado como " + myName + ". ¡Listo para jugar!");

      if (miStart   != null) miStart.setEnabled(true);
      // ELIMINADOS: miGuardar y miCargar
      if (miTop     != null) miTop.setEnabled(true);

    } catch (Exception ex) {
      ex.printStackTrace();
      JOptionPane.showMessageDialog(this,
          "No pude conectar al servidor:\n" + ex.getMessage(),
          "Error", JOptionPane.ERROR_MESSAGE);
    }
  }

  //====== RENDERERS DE CARTAS (con escala) ======
  private static class CardCellRenderer extends JLabel implements ListCellRenderer<Carta> {
    private static final long serialVersionUID = 1L;
    private final java.util.Map<String, Icon> cache = new java.util.HashMap<>();
    private double scale = 1.0;
    private final int baseW = 90, baseH = 134;

    CardCellRenderer() {
      setOpaque(true);
      setHorizontalAlignment(CENTER);
      setVerticalAlignment(CENTER);
    }
    void setScale(double s) { this.scale = Math.max(0.5, Math.min(1.4, s)); cache.clear(); }
    int getCardWidth()  { return (int)Math.round(baseW * scale); }
    int getCardHeight() { return (int)Math.round(baseH * scale); }

    @Override public Component getListCellRendererComponent(
        JList<? extends Carta> list, Carta c, int index, boolean isSelected, boolean cellHasFocus) {

      if (c != null) {
        String key = c.getColor() + "_" + c.getValor() + "_" + getCardWidth() + "x" + getCardHeight();
        Icon icon = cache.get(key);
        if (icon == null) {
          icon = makeCardIcon(c); // intenta imagen; si no, fallback vectorial
          cache.put(key, icon);
        }
        setIcon(icon);
        setText(null);
        setToolTipText(c.toString());
      } else {
        setIcon(null);
        setText("");
        setToolTipText(null);
      }

      if (isSelected) {
        setBackground(new java.awt.Color(0xE0F7FA));
        setBorder(BorderFactory.createLineBorder(new java.awt.Color(0x0097A7), 2));
      } else {
        setBackground(java.awt.Color.white);
        setBorder(BorderFactory.createLineBorder(new java.awt.Color(0xDDDDDD)));
      }
      return this;
    }

    private Icon makeCardIcon(Carta c) {
      int w = getCardWidth(), h = getCardHeight();
      String color = c.getColor().name().toLowerCase(java.util.Locale.ROOT);
      String file  = color + "_" + c.getValor();
      String[] bases = { "/cartas/", "/" };
      String[] exts  = { ".png", ".jpeg", ".jpg" };

      java.net.URL url = null;
      for (String base : bases) {
        for (String ext : exts) {
          url = CardCellRenderer.class.getResource(base + file + ext);
          if (url != null) break;
        }
        if (url != null) break;
      }

      if (url != null) {
        try {
          java.awt.image.BufferedImage src = javax.imageio.ImageIO.read(url);
          java.awt.image.BufferedImage dst = new java.awt.image.BufferedImage(
              w, h, java.awt.image.BufferedImage.TYPE_INT_ARGB);
          Graphics2D g = dst.createGraphics();
          g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
          g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
          g.drawImage(src, 0, 0, w, h, null);
          g.dispose();
          return new ImageIcon(dst);
        } catch (Exception ignore) { /* fallback vectorial */ }
      }

      int arc = (int)Math.round(16 * scale);
      java.awt.image.BufferedImage img =
          new java.awt.image.BufferedImage(w, h, java.awt.image.BufferedImage.TYPE_INT_ARGB);
      Graphics2D g = img.createGraphics();
      g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

      g.setColor(java.awt.Color.white);
      g.fillRoundRect(0, 0, w-1, h-1, arc, arc);
      g.setColor(new java.awt.Color(0xCCCCCC));
      g.drawRoundRect(0, 0, w-1, h-1, arc, arc);

      g.setColor(colorToAwt(c.getColor()));
      g.fillRoundRect((int)Math.round(8*scale), (int)Math.round(24*scale),
          w-(int)Math.round(16*scale), h-(int)Math.round(48*scale), arc, arc);

      g.setColor(java.awt.Color.black);
      g.setFont(g.getFont().deriveFont(Font.BOLD, (float)(28*scale)));
      String val = String.valueOf(c.getValor());
      FontMetrics fm = g.getFontMetrics();
      int tx = (w - fm.stringWidth(val)) / 2;
      int ty = (h + fm.getAscent()) / 2 - (int)Math.round(18*scale);
      g.drawString(val, tx, ty);

      g.setFont(g.getFont().deriveFont(Font.PLAIN, (float)(11*scale)));
      String name = c.getColor().name();
      fm = g.getFontMetrics();
      g.drawString(name, (w - fm.stringWidth(name)) / 2, (int)Math.round(16*scale));
      g.dispose();
      return new ImageIcon(img);
    }
  }

  // ====== Renderer de pilas (chip pequeño) ======
  private static class PilaRenderer extends JLabel implements ListCellRenderer<Pila